#+SETUPFILE:orgheader.org
#+TITLE: Prosjektoppgaver
#+PROPERTY: header-args:python :session :results output org  :eval never-export :tangle yes
#+LANGUAGE: no
#+OPTIONS: html-style:nil

* Største felles divisor
Innenfor tallteori er to talls største felles divisor (/greates common divisor/) en vesentlig egenskap å kunne avgjøre. Målet med denne oppgaven er å lage en funksjoner ~sfd~, med to argumenter ~a~ og ~b~, som returnerer ~a~ og ~b~ sine største felles divisor.

** Oppgave
Vi har et rom som er 221 dm bredt og 595 dm langt. Om vi skal flislegge gulvet i dette rommet med hele kvadratiske fliser, hva er den største sidelengden flisene kan ha?

** En elementær tilnærming
For to tall, ~a~ og ~b~, hvor ~b < a~, kan deres /sfd/ være maksimalt ~b/2~.

#+BEGIN_TASK
Argumenter for foregående setning.
#+END_TASK

Dersom ~sfd(a,b) == 1~ har ~a~ og ~b~ /ingen/ felles divisorer større enn én, vi sier da at ~a~ og ~b~ /relativt primistiske/. For å finne en eventuell /sfd/ for ~a~ og ~b~, kan vi da teste alle tall fra 1 til ~b/2~.

#+BEGIN_SRC python
def sfd_elementaer(a, b):
    """Returner største felles divisor for heltallene a og b."""

    if a > b:
        a, b = b, a

    sfd = 1                     # Holder denne verdien er a og b relativt primistiske
    test = 1
    
    while test <= b/2:
        if a % test == 0 and b % test == 0:
            sfd = test
        test += 1

    return sfd
#+END_SRC

#+RESULTS:
#+BEGIN_SRC org
17
#+END_SRC

#+BEGIN_TASK
Denne testen er ineffektiv. Blant annet sjekker den alle partall, uavhengig av om ~a~ eller ~b~ er oddetall. Endre funksjonen til å være slik ~test~ økes med 2 i oddetallssteg (1, 3, 5, ...) dersom  enten ~a~ eller ~b~ er oddetall.
#+END_TASK

#+BEGIN_TASK
Lag en predikatfunksjon som svarer på hvorvidt ~a~ og ~b~ er relativt primistiske.
#+END_TASK

** TODO Euklids algoritme

#+BEGIN_SRC python
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle

width = 221
height = 595

fig, ax = plt.subplots(1)



rect = Rectangle((0, 0), width, height, linewidth=1, edgecolor='b', facecolor='none')
ax.set_autoscale_on(False)

ax.add_patch(rect)

plt.show()
#+END_SRC


#+BEGIN_SRC python :session none
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle


# We just subclass Rectangle so that it can be called with an Axes
# instance, causing the rectangle to update its shape to match the
# bounds of the Axes
class UpdatingRect(Rectangle):
    def __call__(self, ax):
        self.set_bounds(*ax.viewLim.bounds)
        ax.figure.canvas.draw_idle()


# A class that will regenerate a fractal set as we zoom in, so that you
# can actually see the increasing detail.  A box in the left panel will show
# the area to which we are zoomed.
class MandelbrotDisplay(object):
    def __init__(self, h=500, w=500, niter=50, radius=2., power=2):
        self.height = h
        self.width = w
        self.niter = niter
        self.radius = radius
        self.power = power

    def __call__(self, xstart, xend, ystart, yend):
        self.x = np.linspace(xstart, xend, self.width)
        self.y = np.linspace(ystart, yend, self.height).reshape(-1, 1)
        c = self.x + 1.0j * self.y
        threshold_time = np.zeros((self.height, self.width))
        z = np.zeros(threshold_time.shape, dtype=complex)
        mask = np.ones(threshold_time.shape, dtype=bool)
        for i in range(self.niter):
            z[mask] = z[mask]**self.power + c[mask]
            mask = (np.abs(z) < self.radius)
            threshold_time += mask
        return threshold_time

    def ax_update(self, ax):
        ax.set_autoscale_on(False)  # Otherwise, infinite loop

        # Get the number of points from the number of pixels in the window
        dims = ax.patch.get_window_extent().bounds
        self.width = int(dims[2] + 0.5)
        self.height = int(dims[2] + 0.5)

        # Get the range for the new area
        xstart, ystart, xdelta, ydelta = ax.viewLim.bounds
        xend = xstart + xdelta
        yend = ystart + ydelta

        # Update the image object with our new data and extent
        im = ax.images[-1]
        im.set_data(self.__call__(xstart, xend, ystart, yend))
        im.set_extent((xstart, xend, ystart, yend))
        ax.figure.canvas.draw_idle()

md = MandelbrotDisplay()
Z = md(-2., 0.5, -1.25, 1.25)

fig1, (ax1, ax2) = plt.subplots(1, 2)
ax1.imshow(Z, origin='lower', extent=(md.x.min(), md.x.max(), md.y.min(), md.y.max()))
ax2.imshow(Z, origin='lower', extent=(md.x.min(), md.x.max(), md.y.min(), md.y.max()))

rect = UpdatingRect([0, 0], 0, 0, facecolor='None', edgecolor='black', linewidth=1.0)
rect.set_bounds(*ax2.viewLim.bounds)
ax1.add_patch(rect)

# Connect for changing the view limits
ax2.callbacks.connect('xlim_changed', rect)
ax2.callbacks.connect('ylim_changed', rect)

ax2.callbacks.connect('xlim_changed', md.ax_update)
ax2.callbacks.connect('ylim_changed', md.ax_update)
ax2.set_title("Zoom here")

plt.show()
#+END_SRC

#+RESULTS:
#+BEGIN_SRC org
#+END_SRC


*** TODO Animasjon SFD
À la Wikipedias [[https://no.wikipedia.org/wiki/St%C3%B8rste_felles_divisor][Største felles divisor]].
**** TODO Legge inn ImageMagick
https://www.imagemagick.org/script/download.php#windows


** Kilder
[[https://no.wikipedia.org/wiki/St%C3%B8rste_felles_divisor][Største felles divisor]]


